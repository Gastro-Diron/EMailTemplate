# +required Version of the endpoint configuration YAML
version: 0.1

swagger: '2.0'
info:
  version: 1.0.0
  title: EmailVerification
  description: An API to send a verification code to the user via email

# +required List of endpoints to create
endpoints:
  # +required Unique name for the endpoint. (This name will be used when generating the managed API)
- name: EmailVerification 9090
  # +required Numeric port value that gets exposed via this endpoint
  port: 9090
  # +required Type of the traffic this endpoint is accepting. Example: REST, GraphQL, etc.
  # Allowed values: REST, GraphQL, GRPC
  type: REST
  # +optional Network level visibility of this endpoint. Defaults to Project
  # Accepted values: Project|Organization|Public.
  networkVisibility: Public
  # +optional Context (base path) of the API that is exposed via this endpoint.
  # This is mandatory if the endpoint type is set to REST or GraphQL.
  context: /users
  # +optional Path to the schema definition file. Defaults to wild card route if not provided
  # This is only applicable to REST endpoint types.
  # The path should be relative to the docker context.
  # schemaFilePath: greeting_openapi.yaml

  paths:
    /users:
      post:
        description: Create a new user in the temporary user store
        parameters:
          - name: UserEntry
            in: body
            description: creates a new user in the temporary database
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                name:
                  type: string
                country:
                  type: string
                  
        responses:
          200:
            description: Successfully created a new artist
            schems:
              type: string
            
          400:
            description: Invalid request 
            schema:
              type: object
              properties:   
                errmsg:
                  type: string
    #  ----- Added lines  ----------------------------------------
    /users/{username}:
      get:
        description: To get a new verifcation code to the email
        parameters:
          - name: username
            in: path 
            type: string
            required: true 
            
        responses:
          200:
            description: New verification code has been sent to the email
            schema:
              type: string
                  
          400:
            description: Invalid request
            schema:
              type: object 
              properties:           
                errmsg:
                  type: string
      
      post:
        description: Updates the password of the user and create account in Asgardeo
        parameters:
          - name: username
            in: path 
            type: string
            required: true 
          - name: password
            in: path
            type: string
            required: true
                  
        responses:
          200:
            description: User's password is updated and user has been successfully created in the Asgardeo user store
            schema:
              type: string
            
          400:
            description: Invalid request 
            schema:
              type: object
              properties:   
                errmsg:
                  type: string

      delete:
        description: To delete the user from the Temporary User store
        parameters:
          - name: username
            in: path 
            type: string
            required: true 

        responses::
          200:
            description: User has been successfully deleted from the temporary user store
            schema:
              type: string
            
          400:
            description: Invalid request
            schema:
              type: object
              properties:   
                errmsg:
                  type: string
    #  ---- /Added lines  ----------------------------------------

    /verify:
      post:
        description: To check the verification code of the user
        parameters:
          - name: VerifyEntry
            in: body
            description: posts the verification code of the user to the database and check
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                code:
                  type: string
                  
        responses:
          200:
            description: Successfully posted the verification code
            schema:
              type: object
              properties:   
                status:
                  type: string
            
          400:
            description: Invalid request 
            schema:
              type: object
              properties:   
                errmsg:
                  type: string
